#This file has been generated automatically. DO NOT MODIFY!
openapi: 3.0.0
info:
  title: Horizon
  description: |
    Horizon is the client-facing REST API module that consumes data from the core of the system and makes it more convenient to use the
    client facing application. It allows submitting transactions to the network,
    reading history of operations, and checking the state of entities.

    > IMPORTANT: Note that endpoints not specified in this document or marked as `WIP` do not guaranty the backwards compability maintenance.

    ### Overview
    Horizon uses [JSON:API](https://jsonapi.org/) convention to format requests and responses.
    The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
    and "OPTIONAL" in this document are to be interpreted as described in [RFC 2119](https://www.ietf.org/rfc/rfc2119.txt>).
    ### Security
    TokenD uses the Ed25519 algorithm for authorizing any request or read private data. The use of such cryptographic proof allows building a system where transfer of secrets in an open form is not necessary, which significantly improves the security. Thus, an attacker who has access to one of the servers will not be able to compromise users' secrets.

    Request signature implementation is based on IETF HTTP Signatures draft RFC. Implicit headers parameter is not supported; clients must explicitly specify headers used for signing.

    The signature algorithm supported is ed25519-sha256, which uses public signer key as `keyId`.

    Both Signature and Authorization HTTP authentication schemas are supported.

    The minimum recommended data to sign is the (request-header) and date.

    For the following request:

    ```http
    GET /users?type=2 HTTP/1.1
    Host: api.tokend.io
    Date: Fri, 05 Jan 2018 21:31:40 GMT
    ```

    Signing string would be:

    ```text
    date: Fri, 05 Jan 2018 21:31:40 GMT
    (request-target): get /users?type=2
    ```

    > Note that header names and HTTP method are lowercased.

    The next step is to convert the signing string to a byte array using `UTF-8` encoding and to take its `SHA-256` hash.

    For the signing string above, hash would be:
    ```text
    6fcbee4b0a8932784644d33b360bd3eef389ed37dfd66f17e4bfa910ba9d616a
    ```

    Now, you have to sign hash with a private key and encode the result in `Base64`. For a seed such as `SCDMOOXVNMO6SA22AYUMZDIGLDJMBUTVEGB73FFNTLFJILBJWIU4NQ3D`, the encoded signature would be:

    ```text
    w/y3EsliTmQPC6MS88N/kjU/hFVxlIdhFhzfRGv4yIsSokgMpxVqxcC/CmUsAN4t3BKpskGG7+JEWryV8NXvCg==
    ```

    The result HTTP header included to the request then would be:


    ```text
    Authorization: keyId="GBLTOG6EJS5OWDNQNSCEAVDNMPBY6F73XZHHKR27YE5AKE23ZZEXOLBK",algorithm="ed25519-sha256",signature="w/y3EsliTmQPC6MS88N/kjU/hFVxlIdhFhzfRGv4yIsSokgMpxVqxcC/CmUsAN4t3BKpskGG7+JEWryV8NXvCg==",headers="date (request-target)"
    ```
  contact:
    email: dev@distributedlab.com
    url: https://tokend.io
    name: Support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.1-x.4
  x-logo:
    url: "https://tokend.io/images/logo.svg"
    backgroundColor: "transparent"
    altText: "TokenD"
servers:
  - url: https://api.achilles.tokend.io
    description: TokenD Developer Environment
# NOTE
#
# Add tag to x-tagGroups or it won't be displayed
tags:
  - name: Accounts
    description: Defines access points for accounts and related entities
  - name: Assets
    description: Defines access points for assets
  - name: Fees
    description: Defines access points for fees
  - name: Signers
    description: Defines access points to get signers
  - name: Account Roles
    description: Defines access points to get account role
  - name: Asset Pairs
    description: |
      * A base asset refers to the underlying assets giving value to a company, investment or loan.
      Base asset is not fixed. It will appreciate or depreciate according to market forces.
      * A quote asset refers to the last amount at which 1 base asset was traded,
      meaning the most recent price to which a buyer and seller have agreed as well as the price
      at which some 1 base asset was transacted
  - name: Order Books
    description: |
      An order book is a list of buy and sell orders for a specified asset pair organized by price level.
      An order book lists the amount of asset being bid or offered at each price point.
      It does not identify market participants behind buy and sell orders.
  - name: AMLAlert
    description: Defines access points to AMLAlert Reviewable Requests
  - name: Issuance
    description: Defines access points to get Issuance Reviewable Requests
  - name: Withdrawal
    description: Defines access points to get Withdrawal Reviewable Requests
x-tagGroups:
  - name: Essentials
    tags:
      - Accounts
      - Assets
      - Fees
  - name: Asset Movements
    tags:
      - AMLAlert
      - Issuance
      - Withdrawal
  - name: Access Control
    tags:
      - Signers
      - Signer Roles
      - Signer Rules
  - name: KYC & AML
    tags:
      - Account Roles
      - Account Rules
      - Change Account Role Request
      - AMLAlert
      - Limits
  - name: Decentralized Exchange
    tags:
      - Asset Pairs
      - Offers
      - Order Books
      - Crowd Investing
  - name: Advanced
    tags:
      - PreIssuance
      - KeyValue
  - name: Other
    tags:
      - Requests
      - WIP
paths:
  /v3/accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Account by ID
      description: |
        Allows to get `Account` with corresponding details.
      operationId: getAccountByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of an account
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            ðŸ”’ The following relationships require an owner's or admin's signature to be included:
            * `balances.state`
            * `referrer`
            * `fees`
            * `role`
            * `role.rules`
            * `limits`
            * `external_system_ids`
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - fees
              - balances
              - balances.asset
              - balances.state
              - referrer
              - limits
              - external_system_ids
            example: balances,balances.asset
      responses:
        200:
          description: account exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Account'
                  included:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/AccountKey'
                        - $ref: '#/components/schemas/BalanceStateKey'
                        - $ref: '#/components/schemas/FeeKey'
                        - $ref: '#/components/schemas/ExternalSystemIDKey'
                        - $ref: '#/components/schemas/LimitKey'

        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: such an account does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/account_roles/{id}:
    get:
      tags:
        - Account Roles
      summary: Account Role by ID
      description: |
        Allows to get `Account Role` with corresponding details.
      operationId: getAccountRoleByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of the account role
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: [rules]
      responses:
        200:
          description: account role exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/AccountRole'
                  included:
                    type: array
                    items:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/AccountRule'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: account role does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/account_roles:
    get:
      tags:
        - Account Roles
      summary: Account Role List
      description: |
        Allows to get a list of `Account Role` with corresponding details.
      operationId: getAccountRoles
      parameters:
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: [rules]
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: succesfully retrieved page
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/AccountRole'
                  included:
                    type: array
                    items:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/AccountRule'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/account_rules/{id}:
    get:
      tags:
        - Account Rules
      summary: Account Rule by ID
      description: |
        Allows to get `Account Rule` with corresponding details.
      operationId: getAccountRuleByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of the account rule
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: account rule exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/AccountRule'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: account rule does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/account_rules:
    get:
      tags:
        - Account Rules
      summary: Account Rule List
      description: |
        Allows to get list of `Account Rule` with corresponding details.
      operationId: getAccountRules
      parameters:
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: succesfully retrived page
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/AccountRule'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/account_rules?page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/account_rules?page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/assets/{id}:
    get:
      tags:
        - Assets
      summary: Asset by ID
      description: |
        Allows to get `Asset` with corresponding details.
      operationId: getAssetByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of the asset (code)
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - owner
      responses:
        200:
          description: asset exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Asset'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountKey'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: asset does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/asset_pairs/{id}:
    get:
      tags:
        - Asset Pairs
      summary: AssetPair by ID
      description: |
        Allows to get `AssetPair` with corresponding details.
      operationId: getAssetPairByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of an asset pair that consists of two asset codes
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: BASE:QUOTE
            example: "BTC:ETH"
        - name: include
          in: query
          description: |
            Relationships that may be used for the `include` parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "base_asset"
            enum:
              - base_asset
              - quote_asset
      responses:
        200:
          description: asset pair exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/AssetPair'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: asset pair does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/assets_pairs:
    get:
      tags:
        - Asset Pairs
      summary: AssetPair List
      description: |
        Allows to get a filtered list of `AssetPair` with corresponding details.
      operationId: getAssetPairs
      parameters:
        - name: filter[policy]
          in: query
          description: |
            Filters asset pairs by a specified bit mask. Returns the page of asset pairs where at least one bit intersects
          required: false
          style: form
          explode: false
          schema:
            type: integer
            format: int32
            example: 2
        - name: filter[base_asset]
          in: query
          description: |
            Filters asset pairs by a specified base asset of the pair.
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "BTC"
            format: valid AssetCode
        - name: filter[quote_asset]
          in: query
          description: |
            Filters asset pairs by a specified quote asset of the pair.
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "ETH"
            format: valid AssetCode
        - name: filter[asset]
          in: query
          description: |
            Filters asset pairs by a specified asset of the pair (no matter whether it is base or quote)
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "ETH"
            format: valid AssetCode
        - name: include
          in: query
          description: |
            Relationships that may be used for the `include` parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "base_asset,quote_asset"
            enum:
              - base_asset
              - quote_asset
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: asset pairs that satisfy specified filters
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/AssetPair'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/assets_pairs?include=base_asset&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/assets_pairs?include=base_asset&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: asset pair does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/assets:
    get:
      tags:
        - Assets
      summary: Asset List
      description: |
        Allows to get a filtered list of `Asset` with corresponding details.
      operationId: getAssets
      parameters:
        - name: filter[policy]
          in: query
          description: |
            Filters assets by a specified bit mask. Returns the page of assets where at least one bit intersects
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[owner]
          in: query
          description: |
            Filters assets by a specified owner's account address.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - owner
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: asset exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Asset'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/AccountKey'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/assets?include=owner&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/assets?include=owner&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: asset does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/accounts/{id}/calculated_fees:
    get:
      tags:
        - Fees
        - Accounts
      summary: Calculate fee
      description: |
        Allows to calculate a fee for an account.
      operationId: getCalculatedFee
      parameters:
        - name: asset
          in: path
          description: Unique identifier of an asset
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: fee_type
          in: path
          description: Type of a fee
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: subtype
          in: path
          description: Subtype of a fee
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: amount
          in: path
          description: Amount to calculate on which a fee is based on
          required: true
          style: simple
          explode: false
          format: Amount
          schema:
            type: string
      responses:
        200:
          description: fee does exist and is calculated successfuly
          content:
            application/vnd.api+json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/CalculatedFee'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        500:
          description: internal error occured during the request processing
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/change_role_requests/{id}:
    get:
      tags:
        - Change Account Role Request
      summary: Change Account Role Request by ID
      description: |
        Allows to get `ChangeRole` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getChangeRoleRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by the requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by the reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered  by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by existing tasks in pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by existing tasks in pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by existing tasks in pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.destination_account]
          in: query
          description: |
            Filters change role requests by account to change its role.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[request_details.account_role_to_set]
          in: query
          description: |
            Filters change role requests by account_role_to_set.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.destination_account"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/ChangeRoleDetails'
                        - $ref: '#/components/schemas/Account'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/change_role_requests:
    get:
      tags:
        - Change Account Role Request
      summary: Change Account Role Request List
      description: |
        Allows to get a filtered list of `ChangeRoleRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getChangeRoleRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.account_to_change_role]
          in: query
          description: |
            Filters change_role requests by account to update kyc.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[request_details.account_role_to_set]
          in: query
          description: |
            Filters change_role requests by account_role_to_set.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.destination_account"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/ChangeRoleDetails'
                        - $ref: '#/components/schemas/Account'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/change_role_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/change_role_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_aml_alert_requests/{id}:
    get:
      tags:
        - AMLAlert
      summary: AMLAlert by ID
      description: |
        Allows to get `CreateAmlAlert` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAmlAlertRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.balance]
          in: query
          description: |
            Filters create aml alert requests by balance.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.balance"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAmlAlertDetails'
                        - $ref: '#/components/schemas/Balance'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_aml_alert_requests:
    get:
      tags:
        - AMLAlert
      summary: AMLAlert List
      description: |
        Allows to get a filtered list of `CreateAmlAlertRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAmlAlertRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.balance]
          in: query
          description: |
            Filters create aml alert requests by balance.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.balance"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAmlAlertDetails'
                        - $ref: '#/components/schemas/Balance'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_aml_alert_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_aml_alert_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_asset_requests/{id}:
    get:
      tags:
        - Assets
      summary: Asset Creation Request by ID
      description: |
        Allows to get `CreateAssetRequest` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAssetRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters asset create requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAssetDetails'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_asset_requests:
    get:
      tags:
        - Requests
      summary: Asset Creation Request List
      description: |
        Allows to get a filtered list of `CreateAssetRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAssetRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters asset create requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAssetDetails'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_asset_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_asset_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_atomic_swap_bid_requests/{id}:
    get:
      tags:
        - WIP
      summary: Create Atomic Swap Bid Request by ID
      description: |
        Allows to get `CreateAtomicSwapBid` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAtomicSwapBidRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.base_balance]
          in: query
          description: |
            Create atomic swap bid requests are filtered by base balance.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.base_balance"
              - "request_details.quote_assets"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAtomicSwapBidDetails'
                        - $ref: '#/components/schemas/Balance'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_atomic_swap_bid_requests:
    get:
      tags:
        - WIP
      summary: Create Atomic Swap Bid Request List
      description: |
        Allows to get a filtered list of `CreateAtomicSwapBidRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAtomicSwapBidRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Filters requests by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.base_balance]
          in: query
          description: |
            Filters create_atomic_swap_bid requests by balance.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.base_balance"
              - "request_details.quote_assets"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAtomicSwapBidDetails'
                        - $ref: '#/components/schemas/Balance'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_atomic_swap_bid_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_atomic_swap_bid_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_atomic_swap_requests/{id}:
    get:
      tags:
        - WIP
      summary: Create Atomic Swap Request by ID
      description: |
        Allows to get `CreateAtomicSwap` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateAtomicSwapRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.quote_asset]
          in: query
          description: |
            Filters create atomic swap requests by quote asset.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.quote_asset"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAtomicSwapDetails'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_atomic_swap_requests:
    get:
      tags:
        - WIP
      summary: Create Atomic Swap Request List
      description: |
        Allows to get a filtered list of `CreateAtomicSwapRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateSwapRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.quote_asset]
          in: query
          description: |
            Filters atomic swap requests by quote asset.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.quote_asset"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateAtomicSwapDetails'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_atomic_swap_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_atomic_swap_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_issuance_requests/{id}:
    get:
      tags:
        - Issuance
      summary: Issuance Request by ID
      description: |
        Allows to get `CreateIssuance` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateIssuanceRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters preissuance create requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateIssuanceDetails'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_issuance_requests:
    get:
      tags:
        - Issuance
      summary: Issuance Request List
      description: |
        Allows to get a filtered list of `CreateIssuanceRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateIssuanceRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters issuance create requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateIssuanceDetails'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/issuance_create_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/issuance_create_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_pre_issuance_requests/{id}:
    get:
      tags:
        - PreIssuance
      summary: PreIssuance Request by ID
      description: |
        Allows to get `CreatePreIssuance` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreatePreIssuanceRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters preissuance create requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreatePreIssuanceDetails'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_pre_issuance_requests:
    get:
      tags:
        - PreIssuance
      summary: PreIssuance Request List
      description: |
        Allows to get a filtered list of `AssetCreateRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters preissuance create requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreatePreIssuanceDetails'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_pre_issuance_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_pre_issuance_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_sale_requests/{id}:
    get:
      tags:
        - Crowd Investing
      summary: Create Sale Request by ID
      description: |
        Allows to get `CreateSale` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateSaleRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.base_asset]
          in: query
          description: |
            Filters create sale requests by base asset.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[request_details.default_quote_asset]
          in: query
          description: |
            Filters create_sale requests by default quote asset.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.base_asset"
              - "request_details.default_quote_asset"
              - "request_details.quote_assets"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateSaleDetails'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_sale_requests:
    get:
      tags:
        - Crowd Investing
      summary: Create Sale Request List
      description: |
        Allows to get a filtered list of `CreateSaleRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateSaleRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.base_asset]
          in: query
          description: |
            Filters sale requests by base asset.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[request_details.default_quote_asset]
          in: query
          description: |
            Filters sale requests by default quote asset.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.base_asset"
              - "request_details.default_quote_asset"
              - "request_details.quote_assets"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateSaleDetails'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_sale_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_sale_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_withdraw_requests/{id}:
    get:
      tags:
        - Withdrawal
      summary: Withdrawal Request by ID
      description: |
        Allows to get `CreateWithdraw` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateWithdrawRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.balance]
          in: query
          description: |
            Filters create withdraw requests by balance.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.balance"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateWithdrawDetails'
                        - $ref: '#/components/schemas/Balance'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/create_withdraw_requests:
    get:
      tags:
        - Withdrawal
      summary: Withdrawal Request List
      description: |
        Allows to get a filtered list of `CreateWithdrawRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getCreateWithdrawRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.balance]
          in: query
          description: |
            Filters create withdraw requests by balance.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.balance"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/CreateWithdrawDetails'
                        - $ref: '#/components/schemas/Balance'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/create_withdraw_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/create_withdraw_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/fees:
    get:
      tags:
        - Fees
      summary: Fee List
      description: |
        Allows to get a filtered list of `Fee` with corresponding details.
      operationId: getFeesList
      parameters:
        - name: filter[asset]
          in: query
          description: |
            Filters fees by asset. Returns page of fees for provided asset
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[fee_type]
          in: query
          description: |
            Filters fees by type.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[subtype]
          in: query
          description: |
            Filters fees by subtype.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[account]
          in: query
          description: |
            Filters fees by account address.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[account_role]
          in: query
          description: |
            Filters fees by account role.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[lower_bound]
          in: query
          description: |
            Filters fees by lower_bound.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[upper_bound]
          in: query
          description: |
            Filters fees by upper_bound.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - asset
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: fees exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Fee'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/fees?include=asset&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/fees?include=asset&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: fees do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/key_values/{key}:
    get:
      tags:
        - KeyValue
      summary: KeyValueEntry by ID
      description: |
        Allows to get `KeyValueEntry` with corresponding details.
      operationId: getKeyValueEntryByID
      parameters:
        - name: key
          in: path
          description: Unique identifier of the key-value entry
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "max_contracts_count"
      responses:
        200:
          description: key-value entry exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    $ref: '#/components/schemas/KeyValueEntry'

        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: key-value entry does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/key_values:
    get:
      tags:
        - KeyValue
      summary: KeyValueEntry List
      description: |
        Allows to get `KeyValueEntry` with corresponding details.
      operationId: getKeyValueList
      parameters:
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: KeyValue entries exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/KeyValueEntry'
                  included:
                    type: array
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/key_values?page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/key_values?page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/offers/{id}:
    get:
      tags:
        - Offers
      summary: Offer by ID
      description: |
        Allows to get `Offer` with corresponding details.

        ðŸ”’ An owner's or admin's signature is needed to get data from this endpoint
      operationId: getOfferByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of the offer
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
            example: 10
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - base_asset
              - quote_asset
      responses:
        200:
          description: offer exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Offer'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: offer does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/offers:
    get:
      tags:
        - Offers
      summary: Offers List
      description: |
        Allows to get a filtered list of `Offer` with the corresponding details.

        ðŸ”’ The signature is needed in such cases:

          1. if no filters applied, admin account's signature is required.

          2. if filters are applied, signature of the account by which the filter was requested is required

      operationId: getOffers
      parameters:
        - name: filter[base_balance]
          in: query
          description: |
            Filters offers by specified base balance ID
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: valid balanceID
            example: "BDLXKLLVS6UIQEDYCZKIC5222GGQLCOTHM4BWXVCBDQMJTUWUFUATV2Q"
        - name: filter[quote_balance]
          in: query
          description: |
            Filters offers by specified quote balance ID
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: valid balanceID
            example: "BPGIKLLVS6UIQEDYCJRFH53GJ7GQLCOTHM4BWXVCBDQMJTUWUDPQTVLO"
        - name: filter[base_asset]
          in: query
          description: |
            Filters offers by specified base asset code
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: valid assetCode
            example: "BTC"
        - name: filter[quote_asset]
          in: query
          description: |
            Filters offers by specified quote asset code
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: valid assetCode
            example: "ETH"
        - name: filter[owner]
          in: query
          description: |
            Offers are filtered by specified account that created the offer
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: valid accountID
            example: "GAULFBQKQTFHHHZEIRMYVCGTY47FKWEW7P2BY2YT45HAEODAIJUJH23T"
        - name: filter[order_book]
          in: query
          description: |
            Offers are filtered by specified order book ID
            Defines whether offers are for sale or for trade
            (0 - secondary market, saleId - for specific sale)
          required: false
          style: form
          explode: false
          schema:
            type: number
            format: int64
            example: 2
        - name: filter[is_buy]
          in: query
          description: |
            Defines whether an offer is on buying or selling  base_asset, or both
            * if `is_buy == true` -> only buy `base_asset` offers are filtered
            * if `is_buy == false` -> only sell `base_asset` offers are filtered
            * if `is_buy` is not specified -> both buy and sell `base_asset` offers are filtered
          required: false
          style: form
          explode: false
          schema:
            type: number
            format: int32
            example: 1
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - base_asset
              - quote_asset
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: offer exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Offer'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/offers?include=base_asset&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/offers?include=base_asset&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/order_book/{id}:
    get:
      tags:
        - Order Books
      summary: OrderBook by ID
      description: |
        Returns the list of placed offers without private details.
      operationId: getOrderBookByID
      parameters:
        - name: id
          in: path
          description: "ID of the order book: either 0 for the secondary market or sale ID otherwise"
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
            examle: 0
        - name: base_asset
          in: query
          description: Base asset of requested offers
          required: false
          style: simple
          explode: false
          schema:
            type: string
            format: valid assetCode
            example: "BTC"
        - name: quote_asset
          in: query
          description: Quote asset of requested offers
          required: false
          style: simple
          explode: false
          schema:
            type: string
            format: valid assetCode
            example: "ETH"
        - name: is_buy
          in: query
          description: Defines whether an offer is on buying or selling `base_asset`
          required: false
          style: simple
          explode: false
          schema:
            type: number
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - base_asset
              - quote_asset
      responses:
        200:
          description: order book exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/OrderBookEntry'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/order_book/0?include=base_asset&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/order_book/0?include=base_asset&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: order book does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/requests/{id}:
    get:
      tags:
        - Requests
      summary: Reviewable Request by ID
      description: |
        Allows to get `ReviewableRequest` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Filters requests by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Filters requests by reviewer - account assigned to review request.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Filters requests by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[type]
          in: query
          description: |
            Filters requests by their type.
            * 0 -  "none"
            * 1 -  "any"
            * 2 -  "create_pre_issuance"
            * 3 -  "create_issuance"
            * 4 -  "create_withdraw"
            * 5 -  "create_sale"
            * 6 -  "update_limits"
            * 7 -  "create_aml_alert"
            * 8 -  "change_role"
            * 9 -  "update_sale_details"
            * 10 -  "create_asset"
            * 11 -  "create_invoice"
            * 12 -  "manage_contract"
            * 13 -  "update_asset"
            * 16 -  "create_atomic_swap_bid"
            * 17 -  "create_atomic_swap"
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks]
          in: query
          description: |
            Filters requests by pending tasks bit mask. Returns requests if all bit are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Filters requests by pending tasks bit mask. Returns requests if all bits not set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Filters requests by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequestDetails'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: invalid signature is provided or a signer is not authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/requests:
    get:
      tags:
        - Requests
      summary: Reviewable Request List
      description: |
        Allows to get a filtered list of `ReviewableRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[type]
          in: query
          description: |
            Requests filtered by their type.
            * 0 -   "none"
            * 1 -   "any"
            * 2 -   "create_pre_issuance"
            * 3 -   "create_issuance"
            * 4 -   "create_withdraw"
            * 5 -   "create_sale"
            * 6 -   "update_limits"
            * 7 -   "create_aml_alert"
            * 8 -   "change_role"
            * 9 -   "update_sale_details"
            * 10 -  "create_asset"
            * 11 -  "create_invoice"
            * 12 -  "manage_contract"
            * 13 -  "update_asset"
            * 16 -  "create_atomic_swap_bid"
            * 17 -  "create_atomic_swap"
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 0
            maximum: 17
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Filters requests by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Filters requests by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequestDetails'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/sales/{id}:
    get:
      tags:
        - Crowd Investing
      summary: Sale by ID
      description: |
        Allows to get `Sale` with corresponding details.
      operation: getSaleByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of an account
          required: true
          style: simple
          explode: false
          schema:
            type: integer
            format: int64
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
          enum:
            - base_asset
            - quote_assets
            - default_quote_asset
          example: base_asset,default_quote_asset
      responses:
        200:
          description: sale exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/Sale'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: such a sale does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/sales:
    get:
      tags:
        - Crowd Investing
      summary: Sale List
      description: |
        Allows to get a filtered list of `Sale` with corresponding details.
      operationId: getSales
      parameters:
        - name: filter[owner]
          in: query
          description: |
            Filters sales by a specified owner's account address.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[min_start_time]
          in: query
          description: |
            Filters sales by a specified minimum start time of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: "date-time"
            example: "2012-10-30T22:08:41+00:00"
        - name: filter[min_end_time]
          in: query
          description: |
            Filters sales by a specified minimum end time of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: "date-time"
            example: "2012-10-30T22:08:41+00:00"
        - name: filter[max_start_time]
          in: query
          description: |
            Filters sales by a specified maximal start time of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: "date-time"
            example: "2012-10-30T22:08:41+00:00"
        - name: filter[max_end_time]
          in: query
          description: |
            Filters sales by a specified maximal end time of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: string
            format: "date-time"
            example: "2012-10-30T22:08:41+00:00"
        - name: filter[state]
          in: query
          description: |
            Filters sales by specified sale state.
            Available sale states:
            * 1 - open
            * 2 - closed
            * 3 - cancelled
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1
        - name: filter[max_soft_cap]
          in: query
          description: |
            Filters sales by specified maximum soft cap of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: number
            format: float
            example: "1.000000"
        - name: filter[max_hard_cap]
          in: query
          description: |
            Filters sales by specified maximum hard cap of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: number
            format: float
            example: "3.000000"
        - name: filter[min_soft_cap]
          in: query
          description: |
            Filters sales by specified minimum soft cap of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: number
            format: float
            example: "1.000000"
        - name: filter[min_hard_cap]
          in: query
          description: |
            Filters sales by specified minimum hard cap of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: number
            format: float
            example: "3.000000"
        - name: filter[base_asset]
          in: query
          description: |
            Filters sales by a specified base asset of the sale.
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: "BTC36174"
        - name: filter[sale_type]
          in: query
          description: |
            Filters sales by a specified sale type.
            Available sale types:
            * 1 - basic sale
            * 2 - crowdfunding sale
            * 3 - fixed price sale
          required: false
          style: form
          explode: false
          schema:
            type: integer # todo provide a list of sale types
            example: 1
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - base_asset
              - quote_assets
              - default_quote_asset
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: sale exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/Sale'
                  included:
                    type: array
                    items:
                      $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/sales?include=default_quote_asset&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/sales?include=default_quote_asset&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/signer_roles/{id}:
    get:
      tags:
        - Signer Roles
      summary: Signer Role by ID
      description: |
        Allows to get `Signer Role` with the corresponding details.
      operationId: getSignerRoleByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of the signer role
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: [rules]
      responses:
        200:
          description: signer role exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/SignerRole'
                  included:
                    type: array
                    items:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/SignerRule'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: signer role does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/signer_roles:
    get:
      tags:
        - Signer Roles
      summary: Signer Role List
      description: |
        Allows to get a list of `Signer Role` with corresponding details.
      operationId: getSignerRoles
      parameters:
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum: [rules]
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: succesfully retrived page
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/SignerRole'
                  included:
                    type: array
                    items:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/SignerRule'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/signer_roles?include=rules&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/signer_roles?include=rules&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/signer_rules/{id}:
    get:
      tags:
        - Signer Rules
      summary: Signer Rule by ID
      description: |
        Allows to get `Signer Rule` with corresponding details.
      operationId: getSignerRuleByID
      parameters:
        - name: id
          in: path
          description: Unique identifier of the signer rule
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        200:
          description: signer rule exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/SignerRule'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: signer rule does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/signer_rules:
    get:
      tags:
        - Signer Rules
      summary: Signer Rule List
      description: |
        Allows to get a list of `Signer Rule` with corresponding details.
      operationId: getSignerRules
      parameters:
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: succesfully retrived page
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/SignerRule'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/signer_rules?page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/signer_rules?page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/accounts/{id}/signers:
    get:
      tags:
        - Signers
        - Accounts
      summary: Signers for Account
      description: |
        Allows to get `Signers` of the account with corresponding details.
      operationId: getSignersForAccount
      parameters:
        - name: id
          in: path
          description: Unique identifier of an account
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            The following relationships can be included for signers:
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - role
              - role.rules
            example: role,role.rules
      responses:
        200:
          description: account exists
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Signer'
                  included:
                    type: array
                    items:
                      type: object
                      oneOf:
                        - $ref: '#/components/schemas/Account'
                        - $ref: '#/components/schemas/SignerRole'
                        - $ref: '#/components/schemas/SignerRule'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/accounts/GA67BUDBYDGCVCL6EKPDAREG5IPLHSROF6QJX7MLS2BQJZJDO6FCZAKE/signers?include=role,role.rules&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/accounts/GA67BUDBYDGCVCL6EKPDAREG5IPLHSROF6QJX7MLS2BQJZJDO6FCZAKE/signers?include=role,role.rules&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: such an account does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/update_asset_requests/{id}:
    get:
      tags:
        - Assets
      summary: Update Asset Request by ID
      description: |
        Allows to get `UpdateAssetRequest` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getUpdateAssetRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters update asset requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/UpdateAssetDetails'
                        - $ref: '#/components/schemas/Asset'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/asset_update_requests:
    get:
      tags:
        - Assets
      summary: Update Asset Request List
      description: |
        Allows to get a filtered list of `UpdateAssetRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getUpdateAssetRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[request_details.asset]
          in: query
          description: |
            Filters asset update requests by asset code.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.asset"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/UpdateAssetDetails'
                        - $ref: '#/components/schemas/Asset'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/asset_update_requests?include=asset&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/asset_update_requests?include=asset&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/update_limits_requests/{id}:
    get:
      tags:
        - Limits
      summary: Update Limits Request by ID
      description: |
        Allows to get `UpdateLimits` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getUpdateLimitsRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/UpdateLimitsDetails'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'

        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/update_limits_requests:
    get:
      tags:
        - Limits
      summary: Update Limits Request List
      description: |
        Allows to get a filtered list of `UpdateLimitsRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getUpdateLimitsRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review request.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/UpdateLimitsDetails'
                        - $ref: '#/components/schemas/UpdateLimitsDetails'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/update_limits_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/update_limits_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/update_sale_details_requests/{id}:
    get:
      tags:
        - Crowd Investing
      summary: Update Sale Details by ID
      description: |
        Allows to get `UpdateSaleDetails` by ID

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getUpdateSaleDetailsRequest
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.sale"
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: object
                    $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/UpdateSaleDetailsDetails'
                        - $ref: '#/components/schemas/SaleRequest'
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: request does not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
  /v3/update_sale_details_requests:
    get:
      tags:
        - Crowd Investing
      summary: Update Sale Details List
      description: |
        Allows to get a filtered list of `UpdateSaleDetailsRequest` with details

        ðŸ”’ Requestor's or reviewer's signature is needed
      operationId: getUpdateSaleDetailsRequests
      parameters:
        - name: filter[requestor]
          in: query
          description: |
            Requests are filtered by requestor - source of the operation.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[reviewer]
          in: query
          description: |
            Requests are filtered by reviewer - account assigned to review requests.
          required: false
          style: form
          explode: false
          schema:
            type: string
        - name: filter[state]
          in: query
          description: |
            Requests are filtered by their state.
            * 1 - pending
            * 2 - canceled
            * 3 - approved
            * 4 - rejected
            * 5 - permanently_rejected
          required: false
          style: form
          explode: false
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: filter[pending_tasks]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if all bits are set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_not_set]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if none of bits is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: filter[pending_tasks_any_of]
          in: query
          description: |
            Requests are filtered by pending tasks bit mask. Returns requests if at least one bit is set.
          required: false
          style: form
          explode: false
          schema:
            type: integer
        - name: include
          in: query
          description: |
            Relationships that may be used for the included parameter.
          required: false
          style: form
          explode: false
          schema:
            type: string
            enum:
              - "request_details"
              - "request_details.sale"
        - $ref: '#/components/schemas/pageNumberParam'
        - $ref: '#/components/schemas/pageLimitParam'
        - $ref: '#/components/schemas/sortingParam'
      responses:
        200:
          description: requests exist
          content:
            application/vnd.api+json:
              schema:
                type: object
                required:
                  - data
                  - included
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/ReviewableRequest'
                  included:
                    type: array
                    items:
                      type: object
                      anyOf:
                        - $ref: '#/components/schemas/UpdateSaleDetailsDetails'
                        - $ref: '#/components/schemas/SaleRequest'
                  links:
                    type: object
                    description: "Provides links for pagination"
                    properties:
                      next:
                        type: string
                        description: "link to the next page"
                        example: "/v3/update_sale_details_requests?include=details&page[number]=2&page[limit]=15"
                      self:
                        type: string
                        description: "link to the current page"
                        example: "/v3/update_sale_details_requests?include=details&page[number]=1&page[limit]=15"
        400:
          description: bad input parameter
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        401:
          description: either an invalid signature has been provided or a signer has not been authorized to access specified resources
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
        404:
          description: requests do not exist
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Errors'
components:
  schemas:
    AccountKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "GBSR6JG5AYSAW7HK6EGJFYVIVN54LVGSY3ZLJ6X3IBQZ766EJABCZQTH"
        type:
          type: string
          enum:
            - "accounts"
    Account:
      allOf:
        - $ref: '#/components/schemas/AccountKey'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - balances
                - role
              properties:
                referrer:
                  description: "Referrer is another account that introduced this account into the system."
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
                balances:
                  description: "Defines balances of this account"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/BalanceKey'
                limits:
                  description: "Defines limits specified for this account"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/LimitKey'
                external-system-ids:
                  description: "Defines external system IDs binded to this account"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/ExternalSystemIDKey'
                role:
                  type: object
                  description: "Defines the role of this account"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountRoleKey'
    AccountRoleKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "4581"
        type:
          type: string
          enum:
            - "account-roles"
    AccountRole:
      allOf:
        - $ref: '#/components/schemas/AccountRoleKey'
        - type: object
          properties:
            relationships:
              type: object
              required: [rules]
              properties:
                rules:
                  description: "Rules applied to the role"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/AccountRuleKey'
            attributes:
              type: object
              required: [details]
              properties:
                details:
                  type: object
                  description: "free-form object to attach role details "
                  additionalProperties: true
    AccountRuleKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "7582"
        type:
          type: string
          enum:
            - "account-rules"
    AccountRule:
      allOf:
        - $ref: '#/components/schemas/AccountRuleKey'
        - type: object
          properties:
            attributes:
              type: object
              required: [action, is_forbid,details,resource]
              properties:
                action:
                  type: string
                  description: "defines action to be performed over the specified resource"
                  example: "manage"
                is_forbid:
                  type: bool
                  description: "defines whether or not the specified action is forbidden"
                  example: false
                details:
                  type: object
                  description: "free-form object to attach the rule details"
                  additionalProperties: true
                resource:
                  type: object
                  additionalProperties: true
                  description: "defines resource to which the rule is applied. TODO: add link to XDR"
    AssetKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "USD"
        type:
          type: string
          enum:
            - "assets"
    Asset:
      allOf:
        - $ref: '#/components/schemas/AssetKey'
        - type: object
          properties:
            relationships:
              type: object
              required: [owner]
              properties:
                owner:
                  type: object
                  description: "Owner of an asset"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
            attributes:
              type: object
              required:
                - pre_issuance_asset_signer
                - details
                - max_issuance_amount
                - available_for_issuance
                - issued
                - pending_issuance
                - policies
                - trailing_digits
                - type
              properties:
                pre_issuance_asset_signer:
                  type: string
                  description: "address of the signer responsible for pre-issuance. [Detailsâ†ª](https://tokend.gitbook.io/knowledge-base/technical-details/key-entities/asset#pre-issued-asset-signer)"
                  example: "GBSR6JG5AYSAW7HK6EGJFYVIVN54LVGSY3ZLJ6X3IBQZ766EJABCZQTH"
                max_issuance_amount:
                  type: string
                  description: "Max volume of an asset that can be in circulation"
                  example: "1000.000001"
                  format: Amount
                available_for_issuance:
                  type: string
                  description: "Asset volume authorized to be issued by an asset owner"
                  example: "20.000000"
                  format: Amount
                issued:
                  type: string
                  description: "Asset volume that is currently in circulation"
                  example: "10.000000"
                  format: Amount
                pending_issuance:
                  type: string
                  description: "Asset volume to be distributed via [asset saleâ†ª](https://tokend.gitbook.io/knowledge-base/platform-features/crowdfunding) but currently locked by the system"
                  example: "123.000123"
                  format: Amount
                policies:
                  type: object
                  decription: "Defines properties of an asset"
                  $ref: '#/components/schemas/AssetPolicyMask'
                trailing_digits:
                  type: integer
                  format: int32
                  description: "Number of significant digits after the point"
                  maximum: 6
                  minimum: 0
                  example: 2
                type:
                  type: integer
                  format: uint64
                  description: "Numeric type of asset"
                  example: 2
                details:
                  type: object
                  description: "free-form object to attach asset details such as a link to icon, short description, etc."
    AssetPairKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          description: "string of the `BASE:QUOTE` form"
          example: "BTC:ETH"
        type:
          type: string
          enum:
            - "asset-pairs"

    AssetPair:
      allOf:
        - $ref: '#/components/schemas/AssetPairKey'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - base_asset
                - quote_asset
              properties:
                base_asset:
                  type: object
                  description: "defines the base asset of an asset pair"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                quote_asset:
                  type: object
                  description: "defines the quote asset of an asset pair"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - price
                - policies
              properties:
                price:
                  type: string
                  example: "3.000000"
                  format: Amount
                  description: "defines an asset pair price as quote asset divided by base asset (i.e., amount of quote asset per 1 base asset)"
                policies:
                  type: object
                  decription: "Defines asset pair properties "
                  $ref: '#/components/schemas/AssetPairPolicyMask'
    BalanceStateKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "BDLXKLLVS6UIQEDYCZKIC5222GGQLCOTHM4BWXVCBDQMJTUWUFUATV2Q"
        type:
          type: string
          enum:
            - "balances-state"
    BalanceState:
      allOf:
        - $ref: '#/components/schemas/BalanceStateKey'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - available
                - locked
              properties:
                available:
                  type: string
                  example: "1200.123456"
                  format: Amount
                  description: "Amount available to be spent by an account"
                locked:
                  type: string
                  example: "10.123456"
                  format: Amount
                  description: "Amount locked on the balance by some operation (ex: ManageOffer, CreateWithdrawalRequest, etc.) and controlled by the system."
    BalanceKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "BDLXKLLVS6UIQEDYCZKIC5222GGQLCOTHM4BWXVCBDQMJTUWUFUATV2Q"
        type:
          type: string
          enum:
            - "balances"
    Balance:
      allOf:
        - $ref: '#/components/schemas/BalanceKey'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - asset
                - state
              properties:
                asset:
                  type: object
                  description: "asset the balance of which is shown"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                state:
                  type: object
                  description: "current state of the balance"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceStateKey'
    Errors:
      description: "Standard JSON:API error"
      type: object
      required:
        - errors
      properties:
        errors:
          type: array
          description: "Non-empty array of errors occurred during request processing"
          items:
            type: object
            required:
              - title
              - status
            properties:
              title:
                type: string
                description: "Short, human-readable summary of the problem"
                example: "Bad Request"
              detail:
                type: string
                description: "Human-readable explanation specific to this occurrence of the problem"
                example: "Request body was expected"
              status:
                type: integer
                description: "HTTP status code applicable to this problem"
                example: 400
                enum:
                  - 400
                  - 401
                  - 404
              meta:
                type: object
                properties:
                  field:
                    type: string
                    description: "Defines which field is invalid"
                    example: "include"
                  error:
                    type: string
                    description: "Defines what is wrong with the specifed field"
                    example: "`invalid_include` is not supported; supported values`: [balances balances.asset balances.state referrer role role.rules]"


    ExternalSystemIDKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "1"
        type:
          type: string
          enum:
            - "external-system-ids"

    ExternalSystemID:
      allOf:
        - $ref: '#/components/schemas/ExternalSystemIDKey'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - account
              properties:
                account:
                  type: object
                  description: "specifies an account to which this external system ID is binded"
                  properties:
                    data:
                      $ref: '#/components/schemas/AccountKey'
            attributes:
              type: object
              required:
                - external_system_type
                - data
                - is_deleted
                - expires_at
                - binded_at
              properties:
                external_system_type:
                  type: integer
                  format: int32
                  description: "type of the external system"
                  example: 1
                data:
                  type: string
                  description: "identifier of an account in the external system."
                  example: "0x34C274CA68d7F5bd39b855194Dc3382Fd99aee58"
                is_deleted:
                  type: bool
                  description: "if true, this external system ID will not be released back to bool after the expiration but will rather be removed"
                  example: false
                expires_at:
                  type: string
                  description: "this ID can be binded to another account in the system after the expiration time"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                binded_at:
                  type: string
                  description: "the time when the external system ID was binded"
                  example: "2012-10-30T22:08:41+00:00"
                  format: "date-time"
    FeeKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "a343e3cbcc72928a571778f77bf2554eb5b72c79ce28bbc9d3325c60c21e5241"
        type:
          type: string
          enum:
            - "fees"


    CalculatedFeeKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "a343e3cbcc72928a571778f77bf2554eb5b72c79ce28bbc9d3325c60c21e5241"
        type:
          type: string
          enum:
            - "calculated-fee"

    CalculatedFee:
      allOf:
        - $ref: '#/components/schemas/CalculatedFeeKey'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                fixed:
                  type: string
                  description: "Fixed amount to pay"
                  example: "1.123456"
                  format: Amount
                calculated_percent:
                  type: string
                  description: "Calculated percent"
                  example: "1.250500"
                  format: Amount

    Fee:
      allOf:
        - $ref: '#/components/schemas/FeeKey'
        - type: object
          properties:
            relationships:
              type: object
              properties:
                account:
                  type: object
                  description: "Account for which fee is set"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
                account_role:
                  type: object
                  description: "Account role for which fee is set"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountRoleKey'
            attributes:
              type: object
              required: [fixed,percent]
              properties:
                fixed:
                  type: string
                  description: "Fixed amount to pay"
                  example: "1.123456"
                  format: Amount
                percent:
                  type: string
                  description: "Percent to calculate fee with. 1.0 represents 100%, 0.21 - 21%"
                  example: "0.234"
                  format: Amount
                applied_to:
                  type: object
                  required:
                    - asset
                    - subtype
                    - fee_type
                    - lower_bound
                    - upper_bound
                  properties:
                    asset:
                      type: string
                      description: "Unique identifier of the asset"
                      example: "USD"
                    subtype:
                      type: integer
                      description: "Subtype of the fee"
                      example: 1
                    fee_type:
                      type: integer
                      description: "Type of fee"
                      minimum: 0
                      maximum: 7
                      example: 2
                    lower_bound:
                      type: string
                      description: "lower bound for fee"
                      example: "123.123456"
                      format: Amount
                    upper_bound:
                      type: string
                      description: "upper bound for fee"
                      example: "321.654321"
                      format: Amount
    KeyValueEntryKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "max_contracts_count" # TODO provide a list of valid keys and corresponding values
        type:
          type: string
          enum:
            - "key-value-entries"


    # specific example for uint64 value in the kv-entry for using it in the example response
    # TODO: make proper one case (u32 OR u64 OR str) using in KeyValueEntryValue
    KeyValueEntryValueU32:
      type: object
      description: |
        Defines the KeyValueEntry value .
        Note that, according to the defined `type`, only one value field is present.
        All other fields are either `null` or absent.

        Possible value fields:
        * `U32`
        * `U64`
        * `Str`
      required:
        - type
      properties:
        type:
          type: object
          descriprion: defines the type of value stored in the KV pair
          required:
            - name
          properties:
            name:
              type: string
              example: "uint32"
              descriprion: defines the type name of the value stored in the KV pair
            value:
              type: number
              example: 1
              description: defines the code of type of the value stored in the KV pair
        u_32:
          type: number
          example: 1
          format: uint32

    KeyValueEntryValueU64:
      type: object
      description: |
        Defines the value of KeyValueEntry.
        Note that according to the defined `type`, only one value field is present.
        All other fields are either `null` or absent.

        Possible value fields:
        * `U32`
        * `U64`
        * `Str`
      required:
        - type
      properties:
        type:
          type: object
          descriprion: defines the type of the value stored in the KV pair
          required:
            - name
          properties:
            name:
              type: string
              example: "uint64"
              descriprion: defines the type name of the value stored in the KV pair
            value:
              type: number
              example: 3
              description: defines the code of type of the value stored in the KV pair
        u_64:
          type: number
          example: 1
          format: uint64


    KeyValueEntryValueStr:
      type: object
      description: |
        Defines the value of KeyValueEntry.
        Note that, according to the defined `type`, only one value field is present.
        All other fields are either `null` or absent.

        Possible value fields:
        * `U32`
        * `U64`
        * `Str`
      required:
        - type
      properties:
        type:
          type: object
          descriprion: defines the type of the value stored in the KV pair
          required:
            - name
          properties:
            name:
              type: string
              example: "string"
              descriprion: defines the type name of the value stored in the KV pair
            value:
              type: number
              example: 2
              description: defines the code of type of the value stored in the KV pair
        str:
          type: string
          example: "example-value"



    KeyValueEntry:
      allOf:
        - $ref: '#/components/schemas/KeyValueEntryKey'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - value
              properties:
                value:
                  oneOf:
                    - $ref: '#/components/schemas/KeyValueEntryValueU32'
                    - $ref: '#/components/schemas/KeyValueEntryValueU64'
                    - $ref: '#/components/schemas/KeyValueEntryValueStr'
    pageNumberParam:
      in: query
      name: page[number]
      required: false
      schema:
        type: integer
        minimum: 0
      description: "Page number to return."
    pageLimitParam:
      in: query
      name: page[limit]
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
        description: "Numbers of items per page to return."
    sortingParam:
      in: query
      name: page[order]
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
        description: Order of records on the page. If sortingParam is not specified, order of records is, by default, sorted by ID.
    LimitKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "1"
        type:
          type: string
          enum:
            - "limits"
    Limit:
      allOf:
        - $ref: '#/components/schemas/LimitKey'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - asset
              properties:
                account:
                  type: object
                  description: "account related to a particular limit"
                  properties:
                    data:
                      $ref: '#/components/schemas/AccountKey'
                  # role:
                  # TODO must be filled after feature/roles_rules merge
                asset:
                  type: object
                  description: "asset related to the limit"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - stats_op_type
                - is_convert_needed
                - daily_out
                - weekly_out
                - monthly_out
                - annual_out
              properties:
                stats_op_type:
                  type: integer
                  format: int32
                  description: "defines the type of operation for which a limit is applied. TODO: provide list of such an operation"
                  example: 1
                is_convert_needed:
                  type: bool
                  description: "if `true`, this limit is applied to operations in other assets except for those specified in `asset` relationships"
                  example: true
                daily_out:
                  type: string
                  example: "100.000000"
                  format: Amount
                weekly_out:
                  type: string
                  example: "700.000000"
                  format: Amount
                monthly_out:
                  type: string
                  example: "3000.000000"
                  format: Amount
                annual_out:
                  type: string
                  example: "36500.000000"
                  format: Amount
    AssetPolicyMask:
      type: object
      description: "Represents a bit mask for the asset policy"
      properties:
        value:
          type: integer
          description: "bit mask"
          format: int32
          example: 4
        flags:
          type: array
          items:
            type: object
            description: "flag of the bit mask"
            properties:
              name:
                type: string
                description: "name of the flag"
                example: "transferable"
              value:
                type: integer
                description: "value of the flag"
                example: 2

    AssetPairPolicyMask:
      type: object
      description: "Represents a bit mask for the asset pair policy"
      properties:
        value:
          type: integer
          description: "bit mask"
          format: int32
          example: 4
        flags:
          type: array
          items:
            type: object
            description: "flag of a bit mask"
            properties:
              name:
                type: string
                description: "name of the flag"
                example: "tradeable_secondary_market"
              value:
                type: integer
                description: "value of the flag"
                example: 1
    OfferKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "10"
        type:
          type: string
          enum:
            - "offers"

    Offer:
      allOf:
        - $ref: '#/components/schemas/OfferKey'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - is_buy
                - order_book_id
                - created_at
                - base_amount
                - quote_amount
                - price
                - fee
              properties:
                is_buy:
                  type: bool
                  description: "defines whether an offer created is on buying or selling the base_asset, or both"
                  example: true
                order_book_id:
                  type: integer
                  format: int64
                  description: "defines whether an offer created is on selling or trading. Could be either `0` (secondary market) or some `saleId` (for specific sale) or `-1`" # todo provide a list of order book IDs
                  example: 1
                created_at:
                  type: string
                  description: "defines the time when the offer was created"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                base_amount:
                  type: string
                  example: "5.000000"
                  format: Amount
                  description: "defines the amount of offer in the base asset"
                quote_amount:
                  type: string
                  example: "15.000000"
                  format: Amount
                  description: "defines the amount of offer in the quote asset"
                price:
                  type: string
                  example: "3.000000"
                  format: Amount
                  description: "defines the price of an offer"
                fee:
                  type: object
                  properties:
                    fixed:
                      type: string
                      description: "Fixed amount to pay"
                      example: "1.123456"
                      format: Amount
                    calculated_percent:
                      type: string
                      description: "Calculated percent"
                      example: "1.250500"
                      format: Amount
            relashionships:
              type: object
              required:
                - owner
                - base_asset
                - base_balance
                - quote_asset
                - quote_balance
              properties:
                owner:
                  type: object
                  description: "defines an owner of the requested offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/AccountKey'
                base_asset:
                  type: object
                  description: "defines the base asset of the requested offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                quote_asset:
                  type: object
                  description: "defines the quote asset of the requested offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                base_balance:
                  type: object
                  description: "defines the base balance of the requested offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceKey'
                quote_balance:
                  type: object
                  description: "defines the quote balance of the requested offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceKey'
    OrderBookEntryKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "BASE84651:QUOTE899:0:f:66110000"
        type:
          type: string
          enum:
            - "order-book-entries"

    OrderBookEntry:
      allOf:
        - $ref: '#/components/schemas/OrderBookEntryKey'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - is_buy
                - price
                - base_amount
                - quote_amount
                - created_at
              properties:
                is_buy:
                  type: bool
                  description: "defines whether an offer is on buying or selling the base_asset" # FIXME ?
                  example: false
                price:
                  type: string
                  format: float
                  description: "defines the price of an offer"
                  example: "33.050000"
                base_amount:
                  type: string
                  format: float
                  description: "defines the base amount of an offer"
                  example: "33.050000"
                quote_amount:
                  type: string
                  format: float
                  description: "defines the quote amount of an offer"
                  example: "1092.302500"
                created_at:
                  type: string
                  description: "defines the time when the offer was created"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
            relationships:
              type: object
              properties:
                base_asset:
                  type: object
                  description: "defines the base asset of an offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/Asset'
                quote_asset:
                  type: object
                  description: "defines the quote asset of an offer"
                  properties:
                    data:
                      $ref: '#/components/schemas/Asset'
    Resources:
      type: array
      items:
        type: object
        oneOf:
          - $ref: '#/components/schemas/Account'
          - $ref: '#/components/schemas/Balance'
          - $ref: '#/components/schemas/BalanceState'
          - $ref: '#/components/schemas/Asset'
          - $ref: '#/components/schemas/Fee'
          - $ref: '#/components/schemas/Limit'
          - $ref: '#/components/schemas/ExternalSystemID'
          - $ref: '#/components/schemas/AccountRole'
          - $ref: '#/components/schemas/AccountRule'
          - $ref: '#/components/schemas/OrderBookEntry'
          - $ref: '#/components/schemas/Offer'
          - $ref: '#/components/schemas/SaleRequest'
    Int64Key:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "12345"
        type:
          type: string
          enum:
            - "requests"
            - "request-details-aml-alert"
            - "request-details-asset-create"
            - "request-details-asset-update"
            - "request-details-atomic-swap"
            - "request-details-aswap-bid"
            - "request-details-issuance"
            - "request-details-limits-update"
            - "request-details-pre-issuance"
            - "request-details-sale"
            - "request-details-change-role"
            - "request-details-update-sale-details"
            - "sales"

    ReviewableRequest:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - requestor
                - reviewer
                - request_details
              properties:
                requestor:
                  description: "Requestor is a source account of the request (i.e., an account that created the request)."
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
                reviewer:
                  description: "Reviewer is an account that reviews the request."
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
                request_details:
                  description: "Details specific for a particular request"
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/Int64Key'
            attributes:
              type: object
              required:
                - reject_reason
                - hash
                - all_tasks
                - pending_tasks
                - created_at
                - updated_at
                - state
                - state_i
              properties:
                reject_reason:
                  type: string
                  description: "Details on why a request has been rejected"
                  example: "source account underfunded"
                hash:
                  type: string
                  description: "Hash of a particular request"
                  example: "13935d561f9ec54341243e6afaf0c8bf936928b07f6600204ba8ca550757d0a6"
                all_tasks:
                  type: integer
                  description: "All tasks that have been set for a request"
                  example: 12
                pending_tasks:
                  type: integer
                  description: "Tasks that have not been removed yet"
                  example: 2
                created_at:
                  type: string
                  description: "Time when a request has been submitted"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                updated_at:
                  type: string
                  description: "Last time when a request has been updated"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                state:
                  type: string
                  description: "String representation of the request's state"
                  example: "pending"
                state_i:
                  type: integer
                  description: "Integer representation of the request's state"
                  example: 0
                reference:
                  type: string
                  description: "Reference for the request"
                  example: "719111a51cfc5ad214e4e90ce6610f10e1cba165fd1bc9db73a031352b3bb61c"
                external_details:
                  type: object
                  description: "free-form object to attach details specific to a request and/or request type"
    ReviewableRequestDetails:
      oneOf:
        - $ref: '#/components/schemas/CreateAssetDetails'
        - $ref: '#/components/schemas/UpdateAssetDetails'
        - $ref: '#/components/schemas/CreatePreIssuanceDetails'
        - $ref: '#/components/schemas/CreateIssuanceDetails'
        - $ref: '#/components/schemas/CreateWithdrawDetails'
        - $ref: '#/components/schemas/CreateSaleDetails'
        - $ref: '#/components/schemas/UpdateLimitsDetails'
        - $ref: '#/components/schemas/CreateAmlAlertDetails'
        - $ref: '#/components/schemas/ChangeRoleDetails'
        - $ref: '#/components/schemas/UpdateSaleDetailsDetails'
        - $ref: '#/components/schemas/CreateAtomicSwapBidDetails'
        - $ref: '#/components/schemas/CreateAtomicSwapDetails'

    CreateAssetDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - asset
              properties:
                asset:
                  type: object
                  description: "asset"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - asset
                - type
                - policies
                - pre_issuance_asset_signer
                - max_issuance_amount
                - initial_preissued_amount
                - creator_details
              properties:
                asset:
                  type: string
                  description: "Unique asset identifier"
                  example: "USD"
                type:
                  type: integer
                  description: "Numeric type of asset"
                  example: 1
                policies:
                  type: integer
                  description: "Policies specified for the asset creation"
                  example: 12
                pre_issuance_asset_signer:
                  type: string
                  description: "Address of account that performs pre issuance"
                  example: "GBSR6JG5AYSAW7HK6EGJFYVIVN54LVGSY3ZLJ6X3IBQZ766EJABCZQTH"
                max_issuance_amount:
                  type: string
                  description: "Maximal amount to be issued"
                  example: "1000.123456"
                  format: Amount
                initial_preissued_amount:
                  type: string
                  description: "Amount to be issued automatically right after the asset creation"
                  example: "1000.123456"
                  format: Amount
                creator_details:
                  type: object
                  description: "free-form object to attach details"

    UpdateAssetDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - asset
              properties:
                asset:
                  type: object
                  description: "asset"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - policies
                - creator_details
              properties:
                policies:
                  type: integer
                  description: "Policies specified for the asset creation"
                  example: 12
                creator_details:
                  type: object
                  description: "free-form object to attach details"

    CreatePreIssuanceDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - asset
              properties:
                asset:
                  type: object
                  description: "asset"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - amount
                - signature
                - reference
                - max_issuance_amount
                - initial_preissued_amount
                - creator_details
              properties:
                amount:
                  type: string
                  description: "Amount to be pre issued"
                  example: "123214.123456"
                  format: Amount
                signature:
                  type: string
                  description: "Signature of the pre issuance signer"
                  example: "a343e3cbcc72928a571778f77bf2554eb5b72c79ce28bbc9d3325c60c21e5241"
                reference:
                  type: string
                  description: "Reference on the pre issuance request (since it cannot be submitted more than once)"
                  example: "a343e3cbcc72928a571778f77bf2554eb5b72c79ce28bbc9d3325c60c2123451"
                max_issuance_amount:
                  type: string
                  description: "Maximal amount to be issued"
                  example: "1000.123456"
                  format: Amount
                initial_preissued_amount:
                  type: string
                  description: "Amount to be issued automatically right after the asset creation"
                  example: "300.123456"
                  format: Amount
                creator_details:
                  type: object
                  description: "free-form object to attach details"

    CreateIssuanceDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - asset
                - receiver
              properties:
                asset:
                  type: object
                  description: "Asset"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                receiver:
                  type: object
                  description: "Balance id that will receive the issued amount"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceKey'
            attributes:
              type: object
              required:
                - creator_details
                - amount
              properties:
                amount:
                  type: string
                  description: "Amount to be issued"
                  example: "1000.123456"
                  format: Amount
                creator_details:
                  type: object
                  description: "free-form object to attach details"

    CreateWithdrawDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - balance
              properties:
                balance:
                  type: object
                  description: "Balance id to withdraw from"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceKey'
            attributes:
              type: object
              required:
                - fee
                - amount
                - creator_details
                - reviewer_details
              properties:
                amount:
                  type: string
                  description: "Amount to be issued"
                  example: "1000.123456"
                  format: Amount
                fee:
                  type: object
                  properties:
                    $ref: '#/components/schemas/CalculatedFee'
                creator_details:
                  type: object
                  description: "free-form object to attach details"
                reviewer_details:
                  type: object
                  description: "free-form object to attach reviewer details"

    CreateSaleDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - base_asset
                - quote_assets
                - default_quote_asset
              properties:
                base_asset:
                  type: object
                  description: "Asset to be sold"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                default_quote_asset:
                  type: object
                  description: "Default quote asset for sale"
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                quote_assets:
                  description: "Assets that can be accepted"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - base_asset_for_hard_cap
                - start_time
                - end_time
                - sale_type
                - creator_details
              properties:
                base_asset_for_hard_cap:
                  type: string
                  description: "Maximum amount of base asset to be sold"
                  example: "1000.123456"
                  format: Amount
                start_time:
                  type: string
                  description: "Time when a sale should start"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                end_time:
                  type: string
                  description: "Time when a sale should end"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                sale_type:
                  type: integer
                  minimum: 1
                  maximum: 3
                  example: 2
                  description: |
                    Defines sale type:
                    * 1 - **basic sale**
                    * 2 - **crowdfunding** sale
                    * 3 - **fixed price** sale
                creator_details:
                  type: object
                  description: "free-form object to attach details"

    UpdateLimitsDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            attributes:
              type: object
              required:
                - document_hash
                - creator_details
              properties:
                document_hash:
                  type: string
                  description: "Hash of a document"
                  example: "13935d561f9ec54341243e6afaf0c8bf936928b07f6600204ba8ca550757d0a6"
                creator_details:
                  type: object
                  description: "free-form object to attach details"

    CreateAmlAlertDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - balance
              properties:
                balance:
                  type: object
                  description: "Balance"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceKey'
            attributes:
              type: object
              required:
                - amount
                - creator_details
              properties:
                amount:
                  type: string
                  description: "Amount"
                  example: "1000.123456"
                  format: Amount
                creator_details:
                  type: string
                  example: "free form object for details"

    ChangeRoleDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - destination_account
              properties:
                destination_account:
                  type: object
                  description: "Target account whose role is to be changed"
                  properties:
                    data:
                      $ref: '#/components/schemas/AccountKey'
            attributes:
              type: object
              required:
                - account_role_to_set
                - sequence_number
                - creator_details
              properties:
                account_role_to_set:
                  type: integer
                  minimum: 1
                  maximum: 10
                  description: |

                  example: 1
                sequence_number:
                  type: integer
                  description: "Sequence number"
                  example: 10
                creator_details:
                  type: array
                  items:
                    type: object
                    description: "Free form object for request specific details"

    UpdateSaleDetailsDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - sale
              properties:
                sale:
                  type: object
                  description: "Sale which details should be updated"
                  properties:
                    data:
                      $ref: '#/components/schemas/Int64Key'
            attributes:
              type: object
              required:
                - creator_details
              properties:
                creator_details:
                  type: object
                  description: "New details to set for sale"

    CreateAtomicSwapBidDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - base_balance
                - quote_assets
              properties:
                base_balance:
                  type: object
                  description: "Base balance for bid"
                  properties:
                    data:
                      $ref: '#/components/schemas/BalanceKey'
                quote_assets:
                  description: "Assets that can be accepted"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - creator_details
                - base_amount
              properties:
                base_amount:
                  type: string
                  description: "Amount of bid"
                  example: "100.000001"
                  format: Amount
                creator_details:
                  type: object
                  description: "free-form object"

    CreateAtomicSwapDetails:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            relationships:
              type: object
              required:
                - bid
                - quote_asset
              properties:
                bid:
                  type: object
                  description: "Bid to create atomic swap for"
                  properties:
                    data:
                      $ref: '#/components/schemas/Int64Key'
                quote_asset:
                  description: "Asset used to perform atomic swap"
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
            attributes:
              type: object
              required:
                - base_amount
              properties:
                base_amount:
                  type: string
                  description: "Amount in base asset to perform atomic swap on"
                  example: "100.000001"
                  format: Amount
    SaleKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "5"
        type:
          type: string
          enum:
            - "sales"
    Sale:
      allOf:
        - $ref: '#/components/schemas/SaleKey'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                start_time:
                  type: string
                  description: "time when the sale starts"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                end_time:
                  type: string
                  description: "time when the sale expires"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                sale_type:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 3
                  description: "type of sale"
                  example: 2
                sale_state:
                  type: integer
                  format: int32
                  minimum: 1
                  maximum: 3
                  description: "state of sale" # todo provide a list of sale states
                  example: 2
                details:
                  type: string
                  format: "valid json"
                  description: "represents user-provided data"
                  example: "{ \"data\": \"some user data\"}"
            relationships:
              type: object
              properties:
                owner:
                  description: "Owner of the sale"
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
                base_asset:
                  description: "Base asset of the sale"
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'
                quote_assets:
                  description: "Quote assets specified for the sale"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/AssetKey'
                default_quote_asset:
                  description: "Quote asset specified as default for the sale"
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/AssetKey'

    SaleRequest:
      allOf:
        - $ref: '#/components/schemas/Int64Key'
        - type: object
          properties:
            attributes:
              type: object
              properties:
                start_time:
                  type: string
                  description: "Start time of the sale"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                end_time:
                  type: string
                  description: "End time of the sale"
                  format: "date-time"
                  example: "2012-11-01T22:08:41+00:00"
                sale_type:
                  type: integer
                  minimum: 1
                  maximum: 3
                  example: 1
                  description: |
                    * 1 - basic sale
                    * 2 - crowdfunding sale
                    * 3 - fixed price sale
                sale_state:
                  type: integer
                  minimum: 1
                  maximum: 3
                  example: 1
                  description: |
                    * 1 - open
                    * 2 - closed
                    * 3 - cancelled
                details:
                  type: object
                  description: "free-form object for sale details"
            relationships:
              type: object
              properties:
                owner:
                  type: object
                  description: "Owner of the sale"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
                base_asset:
                  type: object
                  description: "Base asset of the sale"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AssetKey'
                default_quote_asset:
                  type: object
                  description: "Default quote asset of the sale"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AssetKey'
                quote_assets:
                  type: object
                  description: "Quote assets of the sale"
                  properties:
                    data:
                      type: array
                      items:
                        type: object
                        $ref: '#/components/schemas/AssetKey'
    SignerKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "GBSR6JG5AYSAW7HK6EGJFYVIVN54LVGSY3ZLJ6X3IBQZ766EJABCZQTH"
        type:
          type: string
          enum:
            - "signers"
    Signer:
      allOf:
        - $ref: '#/components/schemas/SignerKey'
        - type: object
          properties:
            attributes:
              type: object
              required: [weight, identity, details]
              properties:
                weight:
                  type: integer
                  format: uint32
                  description: "weight of the signature created by the signer"
                identity:
                  type: integer
                  format: uint32
                  description: "identity of the signer (signatures of signers with the same identity are considered as one signature with max weight)"
                details:
                  type: object
                  additionalProperties: true
                  description: "free-form object to attach details to the signer"
            relationships:
              type: object
              required:
                - role
                - account
              properties:
                role:
                  description: "role of a signer"
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/SignerRoleKey'
                account:
                  type: object
                  description: "account controlled by this signer"
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
    SignerRoleKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "4581"
        type:
          type: string
          enum:
            - "signer-roles"
    SignerRole:
      allOf:
        - $ref: '#/components/schemas/SignerRoleKey'
        - type: object
          properties:
            relationships:
              type: object
              required: [rules, owner]
              properties:
                rules:
                  description: "Rules applied to the role"
                  type: object
                  properties:
                    data:
                      type: array
                      items:
                        $ref: '#/components/schemas/SignerRuleKey'
                owner:
                  description: "Owner of the role"
                  type: object
                  properties:
                    data:
                      type: object
                      $ref: '#/components/schemas/AccountKey'
            attributes:
              type: object
              required: [details]
              properties:
                details:
                  type: object
                  description: "free-form object to attach details to the role"
                  additionalProperties: true
    SignerRuleKey:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          example: "7582"
        type:
          type: string
          enum:
            - "signer-rules"
    SignerRule:
      allOf:
        - $ref: '#/components/schemas/SignerRuleKey'
        - type: object
          properties:
            relationships:
              type: object
              required: [owner]
              properties:
                owner:
                  type: object
                  required: [data]
                  properties:
                    data:
                      $ref: '#/components/schemas/AccountKey'
            attributes:
              type: object
              required: [action, is_forbid,details,resource,is_default]
              properties:
                action:
                  type: string
                  description: "defines an action to be performed over the specified resource"
                  example: "manage"
                is_forbid:
                  type: bool
                  description: "defines whether the specified action is forbidden"
                  example: false
                details:
                  type: object
                  description: "free-form object to attach details to the rule"
                  additionalProperties: true
                resource:
                  type: object
                  additionalProperties: true
                  description: "defines a resource to which the rule is applied. TODO: add link to XDR"
                is_default:
                  type: bool
                  description: "defines whether this rule should be included into all new roles"
                  example: true
